type Test {
  # Scalar
  text: String
  # Non-null Scalar
  score: Int!
  # List of Scalar
  arr1: [String]
  # List of Non null Scalar
  arr2: [Float!]
  # Non empty list of Non null scalar
  arr3: [Int!]!
  # Named type
  item: TestItem1
  # Non null type
  requiredItem: TestItem1!
  # Named type list
  items1: [TestItem1]
  # Non null named type list
  items2: [TestItem1!]
  # Named type non-empty list
  items3: [TestItem1]!
  # Non null named type non-empty list
  items4: [TestItem1!]!
  # Union type
  both: ItemsUnion
  # Union type list
  bothArr1: [ItemsUnion]
  # Non null union type list
  bothArr2: [ItemsUnion!]
  # Non null union type non-empty list
  bothArr3: [ItemsUnion!]!
}

type TestItem1 {
  name: String!
  item1: TestItem2
}

type TestItem2 {
  name: String!
}

union ItemsUnion = TestItem1 | TestItem2

type Person {
  id: Int!
  name: String!
  age: Int!
  car: Car!
}

type Car {
  id: Int!
  name: String!
  colour: Colour
}

type Colour {
  id: Int!
  name: String!
  shade: Shade
}

type Shade {
  id: Int!
  name: String!
  hex: String!
}

type Query {
  personByName(name: String): Person
  people: [Person]
  test: Test
}

input CreatePersonInput {
  name: String!
  age: Int!
}

input UpdatePersonNameInput {
  id: Int!
  name: String!
}

input UpdatePersonAgeInput {
  id: Int!
  age: Int!
}

type Mutation {
  createPerson(input: CreatePersonInput!): Person
  updatePersonName(input: UpdatePersonNameInput!): Person
  updatePersonAge(input: UpdatePersonAgeInput!): Person
  removePerson(id: Int!): Person
}
