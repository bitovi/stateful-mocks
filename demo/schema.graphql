type Test {
  text: String
  textArr: [String]
  score: Int!
  item: Item
  requiredItem: Item!
  items: [Item]
  requiredItems: [Item!]
  requiredArrItems: [Item]!
  required: [Item!]!
  both: Items
  bothArr: [Items]
  bothRequiredArr: [Items!]
  bothArrRequired: [Items!]!
}

type Item {
  name: String!
  item1: Item1
}

type Item1 {
  name: String!
}

union Items = Item | Item1

type Person {
  name: String!
  age: Int!
}

type Query {
  personByName(name: String): Person
}

input CreatePersonInput {
  name: String!
  age: Int!
}

input UpdatePersonNameInput {
  id: Int!
  name: String!
}

input UpdatePersonAgeInput {
  id: Int!
  age: Int!
}

type Mutation {
  createPerson(input: CreatePersonInput!): Person
  updatePersonName(input: UpdatePersonNameInput!): Person
  updatePersondAge(input: UpdatePersonAgeInput!): Person
  removePerson(id: Int!): Person
}
